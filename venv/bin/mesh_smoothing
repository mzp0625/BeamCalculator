#!/Users/mma/Desktop/BeamCalculator/venv/bin/python3
# -*- coding: utf-8 -*-
import argparse
import meshio
import numpy
import voropy


def _parse_input_arguments():
    parser = argparse.ArgumentParser(
        description='Smoothen 2D meshes.'
        )

    parser.add_argument(
        'input',
        metavar='INPUT',
        type=str,
        help='Input file'
        )

    parser.add_argument(
        'output',
        metavar='OUTPUT',
        type=str,
        help='Output file'
        )

    parser.add_argument(
        '--method', '-m',
        metavar='METHOD',
        choices=['lloyd', 'lloyd_modified'],
        help='smoothing method (default: lloyd_modified)',
        default='lloyd_modified'
        )

    parser.add_argument(
        '--tolerance', '-t',
        metavar='TOL',
        type=float,
        required=True,
        help='convergence criterion (maximum move)'
        )

    parser.add_argument(
        '--verbose', '-v',
        dest='verbose',
        action='store_true',
        default=False
        )

    parser.add_argument(
        '--output-step-filetype', '-s',
        dest='output_steps_filetype',
        default=None,
        help='write mesh after each Lloyd step'
        )

    parser.add_argument(
        '--flip-frequency', '-f',
        dest='flip_frequency',
        default=0,
        type=int,
        help='how often to do edge flipping (default: 0, adaptive)'
        )

    return parser.parse_args()


if __name__ == '__main__':
    args = _parse_input_arguments()

    X, cells, pt_data, cell_data, field_data = meshio.read(args.input)

    assert args.method in ['lloyd', 'lloyd_modified']
    fcc_type = 'boundary' if args.method == 'lloyd' else 'full'

    if 'geometrical' in cell_data['triangle']:
        a = cell_data['triangle']['geometrical']
        # http://stackoverflow.com/q/42740483/353337
        submesh_bools = {v: v == a for v in numpy.unique(a)}
    else:
        submesh_bools = {0: numpy.ones(len(cells['triangle']), dtype=bool)}

    for cell_in_submesh in submeshes.values():
    X, cells['triangle'] = voropy.smoothing.lloyd_submesh(
        X, cells['triangle'], submesh_bools,
        args.tolerance,
        fcc_type=fcc_type,
        flip_frequency=args.flip_frequency,
        verbose=args.verbose,
        output_filetype=args.output_steps_filetype
        )

    meshio.write(
        args.output,
        X, cells,
        point_data=pt_data,
        cell_data=cell_data,
        field_data=field_data
        )
